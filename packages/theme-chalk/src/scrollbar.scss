@use 'common/vars' as *;
@use 'mixins/mixins.scss' as mix;
@use "mixins/function.scss" as fn;

:root {
  @include mix.generate-css-vars(
    (
      scrollbar: (
        opacity: 0.3,
        bg-color: fn.getCssVar(text, color, secondary),
        hover-opacity: 0.5,
        hover-bg-color: fn.getCssVar(text, color, primary),
        width: 6px,
        height: 6px,
        border-radius: 4px,
        track: (
          bg-color: transparent,
        ),
        thumb: (
          bg-color: fn.getCssVar(text, color, secondary),
          border-radius: 4px,
          hover: (
            bg-color: fn.getCssVar(text, color, primary),
          ),
        ),
      ),
    )
  );
}

@include mix.b(scrollbar) {
  position: relative;
  height: 100%;
  overflow: hidden;

  @include mix.e(wrap) {
    height: 100%;
    overflow: auto;
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE 10+ */

    &::-webkit-scrollbar {
      display: none; /* Chrome Safari */
    }

    @include mix.when(hidden-default) {
      scrollbar-width: none;
      -ms-overflow-style: none;

      &::-webkit-scrollbar {
        display: none;
      }
    }
  }

  @include mix.e(view) {
    height: 100%;
  }

  @include mix.e(bar) {
    position: absolute;
    right: 2px;
    bottom: 2px;
    z-index: 1;
    border-radius: fn.getCssVar(scrollbar, border-radius);
    opacity: 0;
    transition: opacity 120ms ease-out;

    @include mix.when(vertical) {
      width: fn.getCssVar(scrollbar, width);
      top: 2px;

      & > div {
        width: 100%;
      }
    }

    @include mix.when(horizontal) {
      height: fn.getCssVar(scrollbar, height);
      left: 2px;

      & > div {
        height: 100%;
      }
    }
  }

  @include mix.e(thumb) {
    position: relative;
    display: block;
    width: 0;
    height: 0;
    cursor: pointer;
    border-radius: inherit;
    background-color: fn.getCssVar(scrollbar, thumb, bg-color);
    transition: background-color 300ms ease-out;

    &:hover {
      background-color: fn.getCssVar(scrollbar, thumb, hover, bg-color);
    }
  }

  &:active,
  &:focus,
  &:hover {
    .lb-scrollbar__bar {
      opacity: fn.getCssVar(scrollbar, opacity);
      transition: opacity 340ms ease-out;
    }
  }

  @include mix.when(always) {
    .lb-scrollbar__bar {
      opacity: fn.getCssVar(scrollbar, opacity);
    }
  }

  @include mix.when(native) {
    .lb-scrollbar__wrap {
      scrollbar-width: auto;
      -ms-overflow-style: auto;

      &::-webkit-scrollbar {
        display: block;
        width: fn.getCssVar(scrollbar, width);
        height: fn.getCssVar(scrollbar, height);
      }

      &::-webkit-scrollbar-thumb {
        border-radius: fn.getCssVar(scrollbar, border-radius);
        background-color: fn.getCssVar(scrollbar, thumb, bg-color);

        &:hover {
          background-color: fn.getCssVar(scrollbar, thumb, hover, bg-color);
        }
      }

      &::-webkit-scrollbar-track {
        background-color: fn.getCssVar(scrollbar, track, bg-color);
      }
    }
  }
};
